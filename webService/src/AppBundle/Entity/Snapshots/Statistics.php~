<?php/** * Created by PhpStorm. * User: simonvivier * Date: 23/02/17 * Time: 11:51 */namespace AppBundle\Entity\Snapshots;use AppBundle\Entity\IJsonUpdatable;use AppBundle\Entity\INamable;use Doctrine\Common\Collections\Criteria;use Doctrine\ORM\Mapping as ORM;use Knp\JsonSchemaBundle\Annotations as Json;use Symfony\Component\Config\Definition\Exception\Exception;/** * @ORM\Entity * @ORM\Table(name="statistics") * Un event important en ressources sur un @link Snapshot */class Statistics implements IJsonUpdatable{    /**     * @ORM\Id     * @ORM\Column(type="integer")     * @ORM\GeneratedValue     */    private $id;    /**     * Les events les plus important pour l'instance de la BDD     * @ORM\OneToMany(targetEntity="Stat", mappedBy="statistics",cascade={"persist","remove"})     */    private $stats;    /**     * transform a valid json into $this     * @param $json String     */    public function updateFromJson($json){        $jsonDecoded = json_decode($json,true);        $this->stats = (!$this->stats) ? new \Doctrine\Common\Collections\ArrayCollection(): $this->stats;        if (isset($jsonDecoded['Stats'])) {            foreach ($jsonDecoded['Stats'] as $jsonDecodedStat) {                $stat = new Stat();                $stat->updateFromJson(json_encode($jsonDecodedStat));                $this->addStat($stat);            }        }    }    /**     * Constructor     */    public function __construct()    {        $this->stats = new \Doctrine\Common\Collections\ArrayCollection();    }    /**     * Get id     *     * @return integer     */    public function getId()    {        return $this->id;    }    /**     * Add stat     *     * @param \AppBundle\Entity\Snapshots\Stat $stat     *     * @return Statistics     */    public function addStat(\AppBundle\Entity\Snapshots\Stat $stat)    {        $this->stats[] = $stat;        $stat->setStatistics($this);        return $this;    }    /**     * Remove stat     *     * @param \AppBundle\Entity\Snapshots\Stat $stat     */    public function removeStat(\AppBundle\Entity\Snapshots\Stat $stat)    {        $stat->setStatistics(null);        $this->stats->removeElement($stat);    }    /**     * Get stats     *     * @return \Doctrine\Common\Collections\Collection     */    public function getStats()    {        return $this->stats;    }    /**     * get Stat By Name     * @param $statName     * @return \Doctrine\Common\Collections\Collection     */    public function getStatByName($statName)    {        $criteria = Criteria::create();        $expr = Criteria::expr();        $criteria->where($expr->contains('name', $statName));        return $this->stats->matching($criteria)[0];    }    public function  __call ($name,$args){        print $name;        if (substr( $name, 0, 3 ) === "get"){            $name = str_replace('get','',$name);            $name = preg_replace('/[A-Z]/','$0\s',$name);            $name = substr_replace($name, "", -1);            return $this->getStatByName($name);        }    }    //---------------------------------------------calculated stats---------------------------------------//    public function getPhysicalWritesPerSec(){        return $this->getStatByName('physical reads')->getPerSec();    }    public function getPhysicalWritesCache(){        $physicalWritesPerSec =($this->getStatByName('physical writes') !== null)? $this->getStatByName('physical writes')->getPerSec():0;        $physicalWritesDirectPerSec = ($this->getStatByName('physical writes direct') !== null)?$this->getStatByName('physical writes direct')->getPerSec():0;        if ($physicalWritesPerSec == 0)            return 1;        return ($physicalWritesPerSec-$physicalWritesDirectPerSec) / $physicalWritesPerSec ;    }    public function getPhysicalReadsCache(){        $physicalReadsPerSec = ($this->getStatByName('physical reads'))?$this->getStatByName('physical reads')->getPerSec():0;        $physicalReadsDirectPerSec = ($this->getStatByName('physical reads direct'))?$this->getStatByName('physical reads direct')->getPerSec():0;        if ($physicalReadsPerSec == 0)            return 1;        return ($physicalReadsPerSec-$physicalReadsDirectPerSec) / $physicalReadsPerSec ;    }    public function getDbBlockGetsCache(){        $dbBlockGetsPerSec = ($this->getStatByName('db block gets'))?$this->getStatByName('db block gets')->getPerSec():0;        $dbBlockGetsDirectPerSec = ($this->getStatByName('db block gets direct'))?$this->getStatByName('db block gets direct')->getPerSec():0;        if ($dbBlockGetsPerSec == 0)            return 1;        return ($dbBlockGetsPerSec-$dbBlockGetsDirectPerSec) / $dbBlockGetsPerSec ;    }    public function getConsistentGetsCache(){        $consistentGetsPerSec = ($this->getStatByName('consistent gets'))?$this->getStatByName('consistent gets')->getPerSec():0;        $consistentGetsDirectPerSec = ($this->getStatByName('consistent gets direct'))?$this->getStatByName('consistent gets direct')->getPerSec():0;        if ($consistentGetsPerSec == 0)            return 1;        return ($consistentGetsPerSec-$consistentGetsDirectPerSec) / $consistentGetsPerSec ;    }    public function getDbBlockChangeOverGets(){        $dbBlockChange = ($this->getStatByName('db block changes'))?$this->getStatByName('db block changes')->getPerSec():0;        $dbBlockGetsDirectPerSec = ($this->getStatByName('db block gets direct'))?$this->getStatByName('db block gets direct')->getPerSec():0;        if($dbBlockGetsDirectPerSec == 0)            return 1;        return $dbBlockChange / $dbBlockGetsDirectPerSec ;    }    public function getConsistentChangeOverGets(){        $consistentChanges = ($this->getStatByName('consistent changes'))?$this->getStatByName('consistent changes')->getPerSec():0;        $consistentGetsPerSec = ($this->getStatByName('consistent gets'))?$this->getStatByName('consistent gets')->getPerSec():0;        if ($consistentGetsPerSec == 0)            return 1;        return $consistentChanges / $consistentGetsPerSec ;    }/**/}